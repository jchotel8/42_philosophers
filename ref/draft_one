#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

# include <unistd.h>
# include <sys/time.h>

typedef struct s_data
{
   int               n_philo;
   int               t_die;
   int               t_eat;
   int               t_sleep;
   int               n_meals;

   pthread_mutex_t   speak;
   pthread_mutex_t   *forks;

   struct timeval    start;
}              t_data;

typedef struct       s_philo
{
   int               id;
   pthread_t         thr;
   pthread_mutex_t   *fork_r;
   pthread_mutex_t   *fork_l;
   long int          t_death;
   int               n_meals;
   t_data            *data;
}                    t_philo;













int   ft_atoi(const char *str)
{
   unsigned int   res;
   size_t         i;
   int            sign;

   res = 0;
   i = 0;
   sign = 1;
   while ((str[i] >= 8 && str[i] <= 13) || str[i] == ' ')
      i++;
   if (str[i] == '+' || str[i] == '-')
      if (str[i++] == '-')
         sign = -sign;
   while (str[i] >= '0' && str[i] <= '9')
      res = res * 10 + str[i++] - '0';
   return (res * sign);
}

long int get_time(struct timeval start)
{
   struct timeval    time;

   gettimeofday(&time, NULL);
   return ((time.tv_sec - start.tv_sec) * 1000 + 
      (time.tv_usec - start.tv_usec) / 1000);
}

void infos(t_data *data, char *str)
{
   struct timeval    time;
   long int          s;

   s = get_time(data->start);
   printf("%lds %ldms : %s", s / 1000, s % 1000, str);
}







int init_mutex(t_data *data)
{
   int i;

   pthread_mutex_init(&data->speak, NULL);
   pthread_mutex_unlock(&data->speak);
   if (!(data->forks = (pthread_mutex_t *)malloc(sizeof(pthread_mutex_t)
      * data->n_philo)))
      return (1);
   while (i < data->n_philo)
   {
      pthread_mutex_init(&data->forks[i], NULL);
      pthread_mutex_unlock(&data->forks[i]);
      i++;
   }
   return (0);
}


t_philo *init_philo(t_data *data)
{
   int i;
   t_philo *philos;

   if (!(philos = (t_philo *)malloc(sizeof(t_philo) * data->n_philo)))
      return (NULL);
   i = 0;
   while (i < data->n_philo)
   {
      philos[i].id = i;
      philos[i].data = data;
      philos[i].fork_l = &data->forks[i];
      philos[i].fork_r = (i == data->n_philo - 1 && data->n_philo != 1 ? &data->forks[0] : &data->forks[i + 1]);
      philos[i].t_death = data->t_die;
      philos[i].n_meals = 0;
      i++;
   }
   return (philos);
}


t_data *init_data(int ac, char **av)
{
   t_data *data;

   if (!(data = (t_data *)malloc(sizeof(t_data))))
      return (NULL);
   if ((data->n_philo = ft_atoi(av[1])) == 0 ||
      (data->t_die = ft_atoi(av[2])) == 0 ||
      (data->t_eat = ft_atoi(av[3])) == 0 ||
      (data->t_sleep = ft_atoi(av[4])) == 0 ||
      (ac == 6 && (data->n_meals = ft_atoi(av[5])) == 0))
      return (NULL);
   data->n_meals = (ac == 5 ? 0 : data->n_meals);
   if(init_mutex(data))
      return (NULL);
   return(data);
}
 





void speak(pthread_mutex_t *speak, t_philo *philo, char *str)
{
   pthread_mutex_lock (speak);
   infos(philo->data, "");
   printf ("Philo %d %s\n", philo->id, str);
   pthread_mutex_unlock (speak);
}

static void *action (void * arg)
{
   t_philo  *philo = (t_philo *) arg;
   while (1)
   {
      //1 - TAKE FORKS
      pthread_mutex_lock (philo->fork_l);
      speak(&philo->data->speak, philo, "has taken a fork");
      pthread_mutex_lock (philo->fork_r);
      //2 - EAT - wait t_eat - set t_death = time + data->t_die
      speak(&philo->data->speak, philo, "is eating");
      philo->t_death = get_time(philo->data->start) + philo->data->t_eat + philo->data->t_die;
      philo->n_meals += 1;
      usleep(philo->data->t_eat * 1000);
      pthread_mutex_unlock (philo->fork_l);
      pthread_mutex_unlock (philo->fork_r);
      //3 - SLEEP - wait t_sleep
      speak(&philo->data->speak, philo, "is sleeping");
      usleep(philo->data->t_sleep * 1000);
      //4 - THINK - wait for the forks
      speak(&philo->data->speak, philo, "is thinking");
   }
 
   return NULL;
}

int start_thread(t_philo *philos, t_data *data)
{
   int i;

   i = 0;
   for (i = 0; i < data->n_philo; i++)
   {
      if (pthread_create(&philos[i].thr, NULL, action, (void *)&philos[i]))
         return (1);
      usleep(100);
   }
   return (0);
}

int end_thread(t_philo *philos, t_data *data)
{
   int i;
   int n_fed;

   i = 0;
   n_fed = 0;
   usleep(1000);
   for (i = 0; i < data->n_philo; i++)
   {
      if (philos[i].t_death < get_time(data->start))
      {
         pthread_mutex_lock (&data->speak);
         infos(data, "");
         printf ("Philo %d died at %ld\n", i, philos[i].t_death);
         //pthread_mutex_unlock (&data->speak);
         return (1);
      }
      if (data->n_meals != 0 && data->n_meals <= philos[i].n_meals)
         n_fed += 1;
   }
   if (n_fed == data->n_philo)
   {
      pthread_mutex_lock (&data->speak);
      infos(data, "EVERYONE IS FED");
      pthread_mutex_unlock (&data->speak);
      return (1);
   }
   return (0);
}
 
int main (int ac, char **av)
{
   t_philo  *philos;
   t_data   *data;

   if ((ac != 5 && ac != 6) || !(data = init_data(ac, av)) 
      || !(philos = init_philo(data)))
      {
         printf("./philo number_of_philosopher time_to_die time_to_eat time_to_sleep [number_of_meals]\n");
         return (1);
      }
   gettimeofday(&data->start, NULL);
   if (start_thread(philos, data))
      return (1);
   while (1)
   {
      if (end_thread(philos, data))
         return (0);
   }
   return 0;
}
